buildscript {
    repositories {
        maven { url='https://repo.u-team.info' }
    }
    dependencies {
        classpath 'info.u-team.curse_gradle_uploader:curse_gradle_uploader:1.5.0'
        classpath 'com.github.breadmoirai:github-release:2.3.7'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.breadmoirai.github-release' version '2.3.7'
}

if(System.getenv("CI_VERSION")) {
    version = System.getenv("CI_VERSION")
} else {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        version = stdout.toString().replace("\n", "").replace("\r", "").trim()
    } catch (Exception ex) {
        println "git describe responded with error: ${ex.getMessage()}"
        println "Using 0.0.0 for version number"
        version = "0.0.0"
    }
}
group = 'ca.fireball1725.skeletonmod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.name

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'skeletonmod'
            mods {
                skeletonmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'skeletonmod'
            mods {
                skeletonmod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'skeletonmod'
            mods {
                skeletonmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'skeletonmod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                skeletonmod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Blame Jared"
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://maven.k-4u.nl"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf("ca.fireball1725.devworld:DevWorld3-1.19.2:${devworld_version}:client")

    compileOnly fg.deobf("mezz.jei:jei-1.19.1-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.19.1-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.1-forge:${jei_version}")

    implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    })
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "SkeletonMod",
                "Specification-Vendor"    : "FireBall1725",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project_name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "FireBall1725",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar

            pom.withXml {
                // Go through all the dependencies
                asNode().dependencies.dependency.each { dep ->
                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }
        }
    }
    repositories {
        maven {
            url = uri("file://${System.getenv("local_maven")}")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

apply plugin: 'info.u_team.curse_gradle_uploader'

curseforge {
    apiKey = System.getenv('CURSE_API_KEY') ?: ''
    project {
        id = curse_project_id
        changelog = file('CHANGELOG.md')
        releaseType = curse_release_type
        addGameVersion minecraft_version

        mainArtifact(jar) {

        }
    }
}

apply plugin: 'com.github.breadmoirai.github-release'

static String readChangelogString(String filePath) {
    File file = new File(filePath)
    if(file.exists()) {
        return file.text
    }

    return ""
}

githubRelease {
    token System.getenv("GITHUB_TOKEN") ?: "InvalidP@ssword"
    owner System.getenv("CIRCLE_PROJECT_USERNAME") ?: ""
    repo System.getenv("CIRCLE_PROJECT_REPONAME") ?: ""
    targetCommitish = System.getenv("CIRCLE_SHA1") ?: ""
    body {
        return readChangelogString("CHANGELOG.md")
    }
    releaseAssets jar.destinationDir.listFiles()
    overwrite true
    tagName = project.version
    releaseName = "v${project.version}"
}
